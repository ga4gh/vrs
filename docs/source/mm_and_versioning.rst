.. _MaturityModelAndVersioning:

Data Class Maturity Model and Versioning
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

The Genomic Knowledge Standards work stream is developing semantic 
data exchange standards for variant representation and annotation. 
To address this, new models are required and must be developed and 
iterated upon through application across community resources. This 
creates a tension between the need to create stable data models 
while ensuring that models evolve to interoperate smoothly across a 
diverse set of stakeholders. Mechanisms for communicating the stability, 
uptake, and development of data classes are paramount to addressing 
this balance.

A maturity model is a useful mechanism for communicating the stability 
of a developing GKS data class. This is needed to help data producers
at each stage of the adoption lifecycle (Figure 1) decide on the 
appropriate time to engage and implement data classes in their 
development and/or production systems. Data classes that have progressed 
through the maturity model should have an associated progression of 
support from the GKS specification maintainers for message generation, 
translation, and validation tooling. 

The purpose of this document is to define a maturity model for 
communicating the stability and level of commitment supporting GKS 
data classes, with the goal of enabling timely specification 
adoption by the community.

.. figure:: images/adoption_lifecycle.png

   The Innovation Adoption Lifecycle (|adoption_lifecycle_source|)

   **Legend** Adopters in every category along the innovation adoption 
   lifecycle benefit from communication about the maturity of new data 
   classes generated by the Genomic Knowledge Standards work stream. 
   Communicating our outreach strategy should consider engagement with 
   these different categories as a primary goal of the maturity model, 
   enabling adopters to engage at a time that is appropriate for their 
   needs.

.. _MaturityLevels:

Data Class Maturity Levels
##########################

Maturity level criteria

.. figure:: images/maturity_levels.png

   Data class maturity level criteria and commitments.

*Maturity advancement process*
Maturity levels are to be reviewed and advanced by consensus among the 
specification leads, in consultation with the associated work group 
membership. Factors to be considered include the criteria specified in 
Data class maturity levels, the degree of adoption observed in the 
community, feedback provided by adopters, and availability of 
specification maintainers to provide the level of support required.

Communicating Maturity Level
############################

*Technical Documentation*
Primary documentation sites (e.g. vrs.ga4gh.org) will include pre-release 
builds (e.g. “2.1.0b3”; see Versioning). The RTD Latest branch will 
point to the most recent release or release candidate.

<Placeholder> a pre-release build on RTD
figure:: images/maturity_levels.png

   Addition of pre-release classes to VRS documentation at vrs.ga4gh.org

   **Legend** An illustration of a pre-release build of VRS available 
   in the version selection tool.

Inclusion of the Release Candidate Classes on the specification page 
provides a mechanism for early adopters (Figure 1) to look at upcoming 
data classes that have already met the bar for interoperable data exchange 
and the associated set of supporting tools for a data class at Release 
Candidate maturity (Table 1).

.. _Versioning:

Versioning
##########

Versions are ascribed to releases of specifications, not to individual data 
classes. It is expected that the maturity of all classes will be at a level 
greater than or equal to the release level (i.e. a beta release MAY include 
beta, rc, and stable maturity classes, but no alpha maturity classes).

Developing features is intrinsically linked to policy surrounding major and 
minor versions, which follow semantic versioning v2 (semver.org) practices 
for API versioning. Version syntax follows PEP 440. A major or minor version 
is considered stable once it is released. A major or minor version may have 
pre-release drafts at the beta and release candidate levels. When referring 
to the current major version, we mean the greatest major version of a 
specification for which there is a stable release. When referring to the 
current minor version, we mean the greatest minor version of a specification 
for which there is a stable release.

*Branch management*

.. figure:: images/branch_management.png

   Branch management for GKS products.

   **Legend** An illustration of the feature development process for GKS 
   projects. Features are introduced in Feature Branches, and when they 
   meet the criteria for advancing maturity they are ready for progression 
   into pre-release branches of the corresponding level (i.e. “Beta” 
   [yellow] or “Release Candidate” [green] branches), and ultimately a
   version release branch (blue). (|branch_mgmt_source|)

.. _CompetencyQueries:

Competency Queries
##################

What does it look like when we want to make the following operations 
on GKS specifications, each of which should also be following our 
standard community :ref:`development process <development-process>`. 
In these examples, the following branches exist:

=========== ===========================================
Branch Name Description
=========== ===========================================
2-dev       Dev branch for VRS 2.x series (RTD hidden)
2.2-beta    Beta branch for VRS 2.2 (RTD “latest”)
2.1         Version 2.1 of VRS (RTD “stable”)
2.0         Version 2.0 of VRS
1.3         Version 1.3 of VRS
=========== ===========================================

*Competency 1: Create a new class*
**Situation:** You want to create a new class for representing 
trans-phased variation sets.

**Action:** The new Phaseset branch is introduced as an alpha-maturity 
class in a feature branch, targeting the next minor version beta branch.
**Example:** Phasesets branch and associated Pull Request

*Competency 2: Breaking change to a stable-maturity class*
**Situation:** You want to rename the “state” field in the VRS v2 
Allele model to “sequence expression”. The documentation and tooling 
updates are minor, but Allele is already stable in v2.0.
**Action:** The revised Allele class is created as a beta-maturity 
class in a feature branch, targeting the next major version beta branch.
**Example:** Allele state revision branch and associated Pull Request

*Competency 3: Backward-compatible change to a stable-maturity class*
**Situation:** You want to add an optional “ref_state” field to the 
SequenceLocation class

*Competency 4: Updates to a rc-maturity class*
I want to make a change to the Sequence Location (v1, Stable) class
I want to make a change to the Absolute / Relative Copy Number 
classes (v1, ?)
I want to extend the VariantPathogenecityClassificationStatement 
class to contain a new attribute
I want to modify an IM Draft model for 
VariantPathogenecityClassificationStatement to revise to 
VariantGermlinePathogenecityClassificationStatement
I want to bring a portion of an IM Draft model for Contributions 
to a technical draft
I want to know when I should start building a version 2 identifier 
set for Allele

Rules
#####

1. Digests contain major version number only
2. VRS minor versions must be backward compatible for all stable data 
classes, but not necessarily forward compatible
   1. This includes consideration of allowed value sets as well as 
   field names

Policy
######

*Community Engagement*
* Entry points? How do we get people engaged in the drafting / updating 
of existing models? 
   * GA4GH Onboarding Program
      * Seems primarily focused on newcomers that are approaching 
      GA4GH as a whole, not necessarily those who have already 
      identified an issue with a GA4GH spec that they want to change.
      * Onboarding One Pager.pdf
      * Onboarding_Contact_Program-1_pager_for_guides-210422
   * Links to meeting agenda or GKS homepage on relevant documentation?

*Advancing maturity level*
Data class models (components) in “stacks” where all artifacts are in 
alignment. Advancement to greater maturity requires incrementally 
broader outreach. Here are some high-level points of consideration 
for advancement between levels:

Alpha Draft - iterative modeling
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

* See Alpha criteria
* GA4GH Checkpoint:
   * Requires review and approval from specification maintainers.

Beta Draft - feature testing
$$$$$$$$$$$$$$$$$$$$$$$$$$$$

* See Beta criteria
* GA4GH Checkpoint:
   * Requires consultation with leads from other GKS specifications.
   * Requires review and approval from specification maintainers.
* Considerations for advancing to a Beta Draft
   * Does this model adequately address captured requirements?
   * Do all internal stakeholders (specification developers) agree on 
   this model?

Release Candidate - scalability testing
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

* See Release Candidate criteria
* GA4GH Checkpoint:
   * Requires consultation with leads from other GKS specifications.
   * Requires consultation with GKS leadership.
   * Requires review and approval from specification maintainers.
* Considerations for advancing to a Release Candidate
   * Is this model simple to apply to test datasets?
   * Has this model been used with other GKS specifications?
   * Are there any parts of this model that are not covered by test 
   datasets?
   * Are there any related models from other communities that we need 
   to compare this with?
   * Are there any model subcomponents that are less mature / under 
   development?

Stable - widespread community adoption
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

* See Stable criteria
* GA4GH Checkpoint:
   * Requires consultation with leads from other GKS specifications.
   * Requires consultation with GKS leadership.
   * Requires consultation with data providers.
   * Requires review and approval from specification maintainers.
* Considerations for this stage
   * Does this model adequately address implementer needs across a 
   variety of use cases?

*Assigning data class / identifier versions with advancing maturity*


.. |adoption_lifecycle_source| replace:: `source <https://en.wikipedia.org/wiki/Technology_adoption_life_cycle>`
.. |branch_mgmt_source| replace:: `source https://lucid.app/lucidchart/03179831-73e6-4f61-b5be-9b274d911980/edit?invitationId=inv_19c99052-5c05-49df-b2e1-8eb7fa560289&page=1g1Oujs5.zsY#`